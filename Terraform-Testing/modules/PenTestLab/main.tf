/**
 * Pentesting Lab Infrastructure Module
 * 
 * This module creates a lab environment with:
 * - Kali Linux, Windows 11, Windows 10, and RHEL VMs
 * - All VMs in the same VNet for network connectivity
 * - Azure Bastion for secure access
 * - Entra ID (Azure AD) integration for authentication for Windows VMs
 * - Entra ID authentication for Kali Linux VM & RHEL VM is not supported
 */


# Resource Group
resource "azurerm_resource_group" "pentest_lab" {
  name     = var.resource_group_name
  location = var.location
}

# Virtual Network
resource "azurerm_virtual_network" "pentest_vnet" {
  name                = "${var.prefix}-vnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name
}

# Subnets
resource "azurerm_subnet" "vm_subnet" {
  name                 = "vm-subnet"
  resource_group_name  = azurerm_resource_group.pentest_lab.name
  virtual_network_name = azurerm_virtual_network.pentest_vnet.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_subnet" "bastion_subnet" {
  name                 = "AzureBastionSubnet"  # This name is required by Azure
  resource_group_name  = azurerm_resource_group.pentest_lab.name
  virtual_network_name = azurerm_virtual_network.pentest_vnet.name
  address_prefixes     = ["10.0.2.0/26"]
}

# Public IP for Bastion
resource "azurerm_public_ip" "bastion_ip" {
  name                = "${var.prefix}-bastion-ip"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name
  allocation_method   = "Static"
  sku                 = "Standard"

}

# Bastion Host
resource "azurerm_bastion_host" "lab_bastion" {
  name                = "${var.prefix}-bastion"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name
  sku                 = "Standard"
  shareable_link_enabled = true
  tunneling_enabled  = true
  ip_connect_enabled  = true
  scale_units         = 3 # Adjust based on expected load

  ip_configuration {
    name                 = "configuration"
    subnet_id            = azurerm_subnet.bastion_subnet.id
    public_ip_address_id = azurerm_public_ip.bastion_ip.id
  }
}

# Network Security Group for VMs
resource "azurerm_network_security_group" "vm_nsg" {
  name                = "${var.prefix}-vm-nsg"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name

  # Allow internal traffic within the VNet
# Inbound rules for VMSS - only allow specific traffic
 
  security_rule {
    name                       = "AllowHttpsInbound"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "Internet"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "AllowAzureLoadBalancerInbound"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "AzureLoadBalancer"
    destination_address_prefix = "*"
  }

     
  security_rule {
    name                       = "AllowAzureGatewayManagerInbound"
    priority                   = 102
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "GatewayManager"
    destination_address_prefix = "*"
  }
     
  security_rule {
    name                       = "AllowBastionInbound"
    priority                   = 103
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_ranges     = ["5701", "8080"]
    source_address_prefix      = "VirtualNetwork"
    destination_address_prefix = "VirtualNetwork"
  }

# Outbound rules for VMSS - allow all outbound traffic
  security_rule {
    name                       = "AllowSshRdpOutbound"
    priority                   = 100
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_ranges     = ["22", "3389"]
    source_address_prefix      = "*"
    destination_address_prefix = "VirtualNetwork"
  }
  security_rule {
    name                       = "AllowAzureCloudOutbound"
    priority                   = 101
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "*"
    destination_address_prefix = "AzureCloud"
  }
  security_rule {
    name                       = "AllowBastionHostCommunicationOutbound"
    priority                   = 102
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "Internet"
  }
  security_rule {
    name                       = "AllowHttpOutbound"
    priority                   = 103
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_ranges     = ["5701", "8080"]
    source_address_prefix      = "VirtualNetwork"
    destination_address_prefix = "VirtualNetwork"
  }
}

# Associate NSG with VM subnet
resource "azurerm_subnet_network_security_group_association" "vm_subnet_nsg" {
  subnet_id                 = azurerm_subnet.vm_subnet.id
  network_security_group_id = azurerm_network_security_group.vm_nsg.id
}

# NSG association with Bastion subnet
resource "azurerm_subnet_network_security_group_association" "bastion_nsg_association" {
  subnet_id                 = azurerm_subnet.bastion_subnet.id
  network_security_group_id = azurerm_network_security_group.vm_nsg.id

  depends_on = [ azurerm_bastion_host.lab_bastion ]
}

# Network interfaces for VMs
resource "azurerm_network_interface" "kali_nic" {
  name                = "${var.prefix}-kali-nic"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.vm_subnet.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_network_interface" "win11_nic" {
  name                = "${var.prefix}-win11-nic"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.vm_subnet.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_network_interface" "win10_nic" {
  name                = "${var.prefix}-win10-nic"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.vm_subnet.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_network_interface" "rhel_nic" {
  name                = "${var.prefix}-rhel-nic"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.vm_subnet.id
    private_ip_address_allocation = "Dynamic"
  }
}

# User Assigned Identity for VMs (for Entra ID integration)
resource "azurerm_user_assigned_identity" "vm_identity" {
  name                = "${var.prefix}-vm-identity"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name
}

# Virtual Machines

# Kali Linux VM
resource "azurerm_linux_virtual_machine" "kali_vm" {
  name                            = "${var.prefix}-kali01"
  location                        = azurerm_resource_group.pentest_lab.location
  resource_group_name             = azurerm_resource_group.pentest_lab.name
  network_interface_ids           = [azurerm_network_interface.kali_nic.id]
  size                            = var.vm_size
  admin_username                  = var.admin_username
  admin_password                  =  local.administrator_login_password 
  disable_password_authentication = false

  # admin_ssh_key {
  #   username   = var.admin_username
  #   public_key = file(var.public_key_path)
  # }


  source_image_reference {
    publisher = "kali-linux"
    offer     = "kali"
    sku       = "kali-2024-2"
    version   = "latest"
  }

  plan {
    name      = "kali-2024-2"
    publisher = "kali-linux"
    product   = "kali"
  }


  os_disk {
    name                 = "${var.prefix}-kali01-os-disk"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  identity {
    type         = "UserAssigned"
    identity_ids = [azurerm_user_assigned_identity.vm_identity.id]
  }
}

resource "azurerm_virtual_machine_extension" "linux_policy_kali" {
  name                 = "AzurePolicyforLinux"
  virtual_machine_id   = azurerm_linux_virtual_machine.kali_vm.id
  publisher            = "Microsoft.GuestConfiguration"
  type                 = "ConfigurationforLinux"
  type_handler_version = "1.0"
  auto_upgrade_minor_version = true
  depends_on = [
    azurerm_linux_virtual_machine.kali_vm,
    azurerm_user_assigned_identity.vm_identity
  ]
}

# Windows 11 VM
resource "azurerm_windows_virtual_machine" "win11_vm" {
  name                = "${var.prefix}-w11"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name
  network_interface_ids = [
    azurerm_network_interface.win11_nic.id,
  ]
  size           = var.vm_size
  admin_username = var.admin_username
  admin_password = local.administrator_login_password

  source_image_reference {
    publisher = "MicrosoftWindowsDesktop"
    offer     = "Windows-11"
    sku       = "win11-24h2-pro"
    version   = "latest"
  }

  os_disk {
    name                 = "${var.prefix}-win11-os-disk"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  identity {
    type         = "UserAssigned"
    identity_ids = [azurerm_user_assigned_identity.vm_identity.id]
  }

  # Install Azure AD login extension for Entra ID authentication
  provisioner "local-exec" {
    command = <<EOT
      az vm extension set \
        --resource-group ${azurerm_resource_group.pentest_lab.name} \
        --vm-name ${self.name} \
        --name AADLoginForWindows \
        --publisher Microsoft.Azure.ActiveDirectory
    EOT
  }
}

# Windows 10 VM
resource "azurerm_windows_virtual_machine" "win10_vm" {
  name                = "${var.prefix}-w10"
  location            = azurerm_resource_group.pentest_lab.location
  resource_group_name = azurerm_resource_group.pentest_lab.name
  network_interface_ids = [
    azurerm_network_interface.win10_nic.id,
  ]
  size           = var.vm_size
  admin_username = var.admin_username
  admin_password = local.administrator_login_password

  source_image_reference {
    publisher = "MicrosoftWindowsDesktop"
    offer     = "Windows-10"
    sku       = "win10-22h2-pro"
    version   = "latest"
  }

  os_disk {
    name                 = "${var.prefix}-win10-os-disk"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  identity {
    type         = "UserAssigned"
    identity_ids = [azurerm_user_assigned_identity.vm_identity.id]
  }

  # Install Azure AD login extension for Entra ID authentication
  provisioner "local-exec" {
    command = <<EOT
      az vm extension set \
        --resource-group ${azurerm_resource_group.pentest_lab.name} \
        --vm-name ${self.name} \
        --name AADLoginForWindows \
        --publisher Microsoft.Azure.ActiveDirectory
    EOT
  }
}

# RHEL VM
resource "azurerm_linux_virtual_machine" "rhel_vm" {
  name                            = "${var.prefix}-rhel"
  location                        = azurerm_resource_group.pentest_lab.location
  resource_group_name             = azurerm_resource_group.pentest_lab.name
  network_interface_ids           = [azurerm_network_interface.rhel_nic.id]
  size                            = var.vm_size
  admin_username                  = var.admin_username
  admin_password                  =  local.administrator_login_password  
  disable_password_authentication = false

  # admin_ssh_key {
  #   username   = var.admin_username
  #   public_key = file(var.public_key_path)
  # }

  source_image_reference {
    publisher = "RedHat"
    offer     = "RHEL"
    sku       = "9-lvm-gen2"
    version   = "latest"
  }

  os_disk {
    name                 = "${var.prefix}-rhel-os-disk"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }


  identity {
    type         = "UserAssigned"
    identity_ids = [azurerm_user_assigned_identity.vm_identity.id]
  }
}


# Assign Azure AD admin role to the VM identity
resource "azurerm_role_assignment" "vm_identity_role" {
  scope                = azurerm_resource_group.pentest_lab.id
  role_definition_name = "Virtual Machine Administrator Login"
  principal_id         = azurerm_user_assigned_identity.vm_identity.principal_id
}

# # Add extensions to Rhel VM to comply with Azure Policies

resource "azurerm_virtual_machine_extension" "linux_policy_rhel" {
  name                 = "AzurePolicyforLinux"
  virtual_machine_id   = azurerm_linux_virtual_machine.rhel_vm.id
  publisher            = "Microsoft.GuestConfiguration"
  type                 = "ConfigurationforLinux"
  type_handler_version = "1.0"
  auto_upgrade_minor_version = true
  depends_on = [
    azurerm_linux_virtual_machine.kali_vm,
    azurerm_user_assigned_identity.vm_identity
  ]
}

